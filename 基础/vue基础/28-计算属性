##### 计算属性的应用场景：

对于下面的代码都可以使用计算属性：

```
<div id="example">
  {{ message.split('').reverse().join('') }}
</div>
//多处使用该js，这样就可以使用计算属性来统一变化


```





##### 计算属性特点：

只有当计算属性依赖的data上的属性发生改变的时候，所有依赖的当前就算属性才会更新。





#### 计算属性设计缓存的目的

我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 **A**，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 **A**。如果没有缓存，我们将不可避免的多次执行 **A** 的 getter！如果你不希望有缓存，请用方法来替代。







##### 计算属性和方法区别：（是否每次需要计算，即是否有缓存的意思）

你可能已经注意到我们可以通过在表达式中调用方法来达到同样的效果：

```
<p>Reversed message: "{{ reversedMessage() }}"</p>

// 在组件中
methods: {
  reversedMessage: function () {
    return this.message.split('').reverse().join('')
  }
}
```

不同的是**计算属性是基于它们的响应式依赖进行缓存的**。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 `message` 还没有发生改变，多次访问 `reversedMessage` 计算属性会立即返回之前的计算结果，而不必再次执行函数。

```
//不会更新，因为Date.now()不是响应式依赖
computed: {
  now: function () {
    return Date.now()
  }
}
```







#### 计算属性vs侦听属性（watch）

区别：大多数情况下计算属性更适合，当需要在数据变化时候执行异步或开销比较大的操作，使用watch。

### [计算属性的 setter](https://cn.vuejs.org/v2/guide/computed.html#计算属性的-setter)

计算属性默认只有 getter，不过在需要时你也可以提供一个 setter：

```
// ...
computed: {
  fullName: {
    // getter
    get: function () {
      return this.firstName + ' ' + this.lastName
    },
    // setter
    set: function (newValue) {
      var names = newValue.split(' ')
      this.firstName = names[0]
      this.lastName = names[names.length - 1]
    }
  }
}
// ...
```

现在再运行 `vm.fullName = 'John Doe'` 时，setter 会被调用，`vm.firstName` 和 `vm.lastName` 也会相应地被更新。

## [侦听器](https://cn.vuejs.org/v2/guide/computed.html#侦听器)

虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 Vue 通过 `watch` 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。

可以使用watch监听输入框的变化，实时查询数据库对应的，例如新用户注册的时候，用户名不可以重复，就可以根据用户每次输入进行查找来判断该用户名是否被注册过。